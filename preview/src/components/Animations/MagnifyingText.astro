---
interface Props {
	distance: number;
	min: number;
	max: number;
	class?: string;
}

const { distance, min, max, class: className } = Astro.props;
---

<magnifying-text class={className} max={max} min={min} distance={distance}>
	<div class="wrapper">
		<div class="content">
			<slot />
		</div>
	</div>
</magnifying-text>

<script>
	import { Coordinate } from "./coordinate";
	import { wrapChars } from "./nodes";

	class MagnifyingTextComponent extends HTMLElement {
		private wrapper: HTMLElement = document.body;
		private content: HTMLElement = document.body;
		private glyphs: HTMLElement[] = [];
		private glyphCoordinates: Coordinate[] = [];
		private glyphWeights: number[] = [];
		private rect: DOMRect = DOMRect.fromRect({
			x: 0,
			y: 0,
			width: 0,
			height: 0,
		});
		private minWeight = 0;
		private maxWeight = 0;
		private maxDistance = 0;

		static observedAttributes = ["max", "min", "distance"];

		attributeChangedCallback(name: string, _: string, newValue: string) {
			switch (name) {
				case "max":
					this.maxWeight = parseInt(newValue, 10);
					break;
				case "min":
					this.minWeight = parseInt(newValue, 10);
					break;
				case "distance":
					this.maxDistance = parseInt(newValue, 10);
					break;
			}
		}

		public connectedCallback() {
			const content = this.querySelector<HTMLElement>(".content");
			const wrapper = this.querySelector<HTMLElement>(".wrapper");
			if (!content || !wrapper) {
				throw new Error("MagnifyingText component not found");
			}

			this.content = content;
			this.wrapper = wrapper;
			this.glyphs = wrapChars(this.content, "span");
			this.glyphWeights = Array(this.glyphs.length);
			this.handleResize();

			window.addEventListener('mousemove', (e) => this.handleMouseMove(e));
			window.addEventListener('resize', () => this.handleResize());
		}

		public handleResize() {
			// Calculate size of first glyph
			const glyph = this.glyphs[0]
			this.setGlyphSize(0, 0);
			const glyphRect = glyph.getBoundingClientRect();
			this.setGlyphSize(glyphRect.width, glyphRect.height);
			// Reset and update size
			this.setContentSize(0, 0);
			this.rect = this.content.getBoundingClientRect();
			this.setContentSize(this.rect.width, this.rect.height);
			// Update glyphs coordinates
			this.glyphCoordinates = this.glyphs.map(Coordinate.fromElement);
		}

		public handleMouseMove(event: MouseEvent) {
			const mouseCoordinate = Coordinate.fromEvent(event);
			if (mouseCoordinate.distanceFromRect(this.rect) > this.maxDistance) {
				for (let i = 0; i < this.glyphs.length; i++) {
					this.setGlyphWeight(i, this.minWeight);
				}
				return;
			}

			for (let i = 0; i < this.glyphs.length; i++) {
				const distance = this.glyphCoordinates[i].distance(mouseCoordinate);
				if (distance > this.maxDistance) {
					this.setGlyphWeight(i, this.minWeight);
				} else {
					this.setGlyphWeight(i, this.weightFromDistance(distance));
				}
			}
		}

		private setGlyphWeight(i: number, weight: number) {
			if (this.glyphWeights[i] === weight) return;
			this.glyphs[i].style.setProperty("--glyphWeight", weight.toString());
		}

		private setContentSize(width: number, height: number) {
			this.wrapper.style.setProperty(
				"--containerWidth",
				width ? `${width}px` : ""
			);
			this.wrapper.style.setProperty(
				"--containerHeight",
				height ? `${height}px` : ""
			);
		}

		private setGlyphSize(width: number, height: number) {
			this.content.style.setProperty("--glyphWidth", width ? `${width}px` : "");
			this.content.style.setProperty(
				"--glyphHeight",
				height ? `${height}px` : ""
			);
		}

		private weightFromDistance(distance: number): number {
			const progress = (1 - distance / this.maxDistance);
			return this.minWeight + (this.maxWeight - this.minWeight) * progress	
		}
	}

	customElements.define("magnifying-text", MagnifyingTextComponent);
</script>

<style>
	.wrapper {
		display: block;
		position: relative;
		transform: translateZ(0);
	}

	.content {
		font: inherit;
		width: var(--containerWidth, fit-content);
		height: var(--containerHeight, initial);
	}

	:global(.glyphNode) {
		display: inline-block;
    width: var(--glyphWidth);
    height: var(--glyphHeight);
    font-variation-settings: "wght" var(--glyphWeight);
	}
</style>
