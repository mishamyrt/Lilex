---
import Typography from "../../components/Typography.astro";

export type Props = {
	title: string;
	alignExample?: "block" | "description";
};

const { title, alignExample = "block" } = Astro.props;
---

<div class="featureRow">
	<Typography
		class:list={[
			"featureRow-title",
			alignExample === "description" ? "_descriptionAligned" : null,
		]}
		as="h2"
		variant="heading-xl"
	>
		{title}
	</Typography>
	<div class="featureRow-description">
		<slot />
	</div>
	<div
		class:list={[
			"featureRow-preview",
			alignExample === "description" ? "_descriptionAligned" : null,
		]}
	>
		<slot name="preview" />
	</div>
</div>

<script>
	import { $isSuperpowersEnabled } from "../../stores/superpowers";

	const titles = document.querySelectorAll(".featureRow-title");
	let active: HTMLElement;

	$isSuperpowersEnabled.subscribe((enabled) => {
		if (!enabled) {
			titles.forEach((title) => {
				title.classList.remove("_active");
			});
		} else if (active) {
			active.classList.add("_active");
		}
	});

	const observer = new IntersectionObserver(
		(entries) => {
			entries.forEach((entry) => {
				if (entry.isIntersecting) {
					if (active) {
						active.classList.remove("_active");
					}
					active = entry.target as HTMLElement;
					if ($isSuperpowersEnabled.get()) {
						active.classList.add("_active");
					}
				}
			});
		},
		{
			rootMargin: "-40%",
		}
	);
	titles.forEach((title) => observer.observe(title));
</script>

<style lang="scss">
	.featureRow {
		display: grid;
		grid-template-columns: repeat(8, 1fr);

		&-title {
			grid-column: 1/5;
			margin-bottom: var(--space-l);
			transition: font-weight var(--transition-slow);

			&._descriptionAligned {
				grid-column: 1/8;
			}

			&._active {
				font-weight: 700;
			}
		}

		&-preview {
			grid-row: 1/3;
			display: flex;
			height: 100%;
			align-items: center;
			grid-column: 5/9;

			&._descriptionAligned {
				grid-row: 2/3;
			}
		}

		&-description {
			grid-column: 1/4;
		}
	}

	@media (max-width: 1400px) {
		.featureRow {
			grid-template-columns: repeat(4, 1fr);
		}
	}

	@media (max-width: 1250px) {
		.featureRow {
			grid-template-columns: repeat(12, 1fr);

			&-preview {
				grid-column: 9 / 13;
			}

			&-description {
				grid-column: 1/6;
			}
		}
	}

	@media (max-width: 1050px) {
		.featureRow {
			&-preview {
				grid-column: 8 / 13;
			}

			&-description {
				grid-column: 1/6;
			}
		}
	}

	@media (max-width: 900px) {
		.featureRow {
			&-description {
				grid-column: 1/7;
			}
		}
	}

	@media (max-width: 850px) {
		.featureRow {
			&-preview,
			&-preview._descriptionAligned {
				grid-row: 4;
				grid-column: 1 / 13;
				padding: var(--space-m) 0;
				margin-top: var(--space-m);
				display: flex;
				justify-content: center;
				background-color: var(--color-background-secondary);
				border-radius: var(--border-radius-m);
			}
		}

		.featureRow-title.variant-heading-xl {
			font: var(--typography-heading-l);
		}
	}

	@media (max-width: 700px) {
		.featureRow {
			&-description {
				grid-column: 1/8;
			}
		}
	}

	@media (max-width: 550px) {
		.featureRow {
			&-description {
				grid-column: 1/13;
			}
		}
	}
</style>
