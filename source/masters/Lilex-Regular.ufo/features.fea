@lca_alt1 = [a.alt01 aacute.alt01 abreve.alt01 acircumflex.alt01 adieresis.alt01 adotbelow.alt01 agrave.alt01 ahook.alt01 amacron.alt01 aogonek.alt01 aring.alt01 aringacute.alt01 atilde.alt01 abreveacute.alt01 abrevedotbelow.alt01 abrevegrave.alt01 abrevehook.alt01 abrevetilde.alt01 acircumflexacute.alt01 acircumflexdotbelow.alt01 acircumflexgrave.alt01 acircumflexhook.alt01 acircumflextilde.alt01];
@lca_cyrl_alt1 = [uni0430.alt01 uni04D3.alt01 uni04D1.alt01];
@lca_cyrl_dflt = [uni0430 uni04D3 uni04D1];
@lca_dflt = [a aacute abreve acircumflex adieresis adotbelow agrave ahook amacron aogonek aring aringacute atilde abreveacute abrevedotbelow abrevegrave abrevehook abrevetilde acircumflexacute acircumflexdotbelow acircumflexgrave acircumflexhook acircumflextilde];
@lcg_alt1 = [g.alt01 gbreve.alt01 gcircumflex.alt01 gcommaaccent.alt01 gdotaccent.alt01];
@lcg_dflt = [g gbreve gcircumflex gcommaaccent gdotaccent];
@numbers_dflt = [zero one two three four five six seven eight nine];
@numbers_dnom = [zero.dnom one.dnom two.dnom three.dnom four.dnom five.dnom six.dnom seven.dnom eight.dnom nine.dnom];
@numbers_numr = [zero.numr one.numr two.numr three.numr four.numr five.numr six.numr seven.numr eight.numr nine.numr];
@numbers_sinf = [zeroinferior oneinferior twoinferior threeinferior fourinferior fiveinferior sixinferior seveninferior eightinferior nineinferior];
@numbers_sups = [zerosuperior onesuperior twosuperior threesuperior foursuperior fivesuperior sixsuperior sevensuperior eightsuperior ninesuperior];
# ----------------
# LANGUAGE SYSTEMS
# ----------------

languagesystem DFLT dflt;   # Default
languagesystem latn dflt;   # Latin default
languagesystem cyrl dflt;   # Cyrillic default



# --------------
# GLOBAL CLASSES
# --------------

   # 23 items
   # 23 items
   # 3 items
   # 3 items
   # 5 items
   # 5 items
   # 10 items
   # 10 items
   # 10 items
   # 10 items
   # 10 items




feature aalt {
	sub a from [a.alt01]; # 1 glyph(s)
	sub g from [g.alt01 g.alt02]; # 2 glyph(s)
	sub zero from [zero.alt01 zero.alt02 zero.numr zero.dnom]; # 4 glyph(s)
	sub one from [one.numr one.dnom]; # 2 glyph(s)
	sub two from [two.numr two.dnom]; # 2 glyph(s)
	sub three from [three.numr three.dnom]; # 2 glyph(s)
	sub four from [four.numr four.dnom]; # 2 glyph(s)
	sub five from [five.numr five.dnom]; # 2 glyph(s)
	sub six from [six.numr six.dnom]; # 2 glyph(s)
	sub seven from [seven.numr seven.dnom]; # 2 glyph(s)
	sub eight from [eight.numr eight.dnom]; # 2 glyph(s)
	sub nine from [nine.numr nine.dnom]; # 2 glyph(s)
	sub aacute from [aacute.alt01]; # 1 glyph(s)
	sub abreve from [abreve.alt01]; # 1 glyph(s)
	sub acircumflex from [acircumflex.alt01]; # 1 glyph(s)
	sub adieresis from [adieresis.alt01]; # 1 glyph(s)
	sub adotbelow from [adotbelow.alt01]; # 1 glyph(s)
	sub agrave from [agrave.alt01]; # 1 glyph(s)
	sub ahook from [ahook.alt01]; # 1 glyph(s)
	sub amacron from [amacron.alt01]; # 1 glyph(s)
	sub aogonek from [aogonek.alt01]; # 1 glyph(s)
	sub aring from [aring.alt01]; # 1 glyph(s)
	sub aringacute from [aringacute.alt01]; # 1 glyph(s)
	sub atilde from [atilde.alt01]; # 1 glyph(s)
	sub abreveacute from [abreveacute.alt01]; # 1 glyph(s)
	sub abrevedotbelow from [abrevedotbelow.alt01]; # 1 glyph(s)
	sub abrevegrave from [abrevegrave.alt01]; # 1 glyph(s)
	sub abrevehook from [abrevehook.alt01]; # 1 glyph(s)
	sub abrevetilde from [abrevetilde.alt01]; # 1 glyph(s)
	sub acircumflexacute from [acircumflexacute.alt01]; # 1 glyph(s)
	sub acircumflexdotbelow from [acircumflexdotbelow.alt01]; # 1 glyph(s)
	sub acircumflexgrave from [acircumflexgrave.alt01]; # 1 glyph(s)
	sub acircumflexhook from [acircumflexhook.alt01]; # 1 glyph(s)
	sub acircumflextilde from [acircumflextilde.alt01]; # 1 glyph(s)
	sub gbreve from [gbreve.alt01]; # 1 glyph(s)
	sub gcircumflex from [gcircumflex.alt01]; # 1 glyph(s)
	sub gcommaaccent from [gcommaaccent.alt01]; # 1 glyph(s)
	sub gdotaccent from [gdotaccent.alt01]; # 1 glyph(s)
	sub germandbls from [germandbls.alt01]; # 1 glyph(s)
	sub tilde from [tilde.alt01 tilde.case tilde.alt01.case]; # 3 glyph(s)
	sub macron from [macron.case]; # 1 glyph(s)
	sub dotaccent from [dotaccent.case]; # 1 glyph(s)
	sub dieresis from [dieresis.case]; # 1 glyph(s)
	sub hungarumlaut from [hungarumlaut.case]; # 1 glyph(s)
	sub acute from [acute.case]; # 1 glyph(s)
	sub grave from [grave.case]; # 1 glyph(s)
	sub circumflex from [circumflex.case]; # 1 glyph(s)
	sub caron from [caron.case]; # 1 glyph(s)
	sub breve from [breve.case breve.cyrl breve.cyrl_case]; # 3 glyph(s)
	sub ring from [ring.case]; # 1 glyph(s)
	sub ringacute from [ringacute.case]; # 1 glyph(s)
	sub hookcomb from [hookcomb.case]; # 1 glyph(s)
	sub breveacute from [breveacute.case]; # 1 glyph(s)
	sub brevegrave from [brevegrave.case]; # 1 glyph(s)
	sub brevehook from [brevehook.case]; # 1 glyph(s)
	sub brevetilde from [brevetilde.case]; # 1 glyph(s)
	sub dieresisacute from [dieresisacute.case]; # 1 glyph(s)
	sub dieresiscaron from [dieresiscaron.case]; # 1 glyph(s)
	sub dieresisgrave from [dieresisgrave.case]; # 1 glyph(s)
	sub circumflexacute from [circumflexacute.case]; # 1 glyph(s)
	sub circumflexbreve from [circumflexbreve.case]; # 1 glyph(s)
	sub circumflexgrave from [circumflexgrave.case]; # 1 glyph(s)
	sub circumflexhook from [circumflexhook.case]; # 1 glyph(s)
	sub dieresismacron from [dieresismacron.case]; # 1 glyph(s)
	sub circumflextilde from [circumflextilde.case]; # 1 glyph(s)
	sub uni0430 from [uni0430.alt01]; # 1 glyph(s)
	sub uni04D3 from [uni04D3.alt01]; # 1 glyph(s)
	sub uni04D1 from [uni04D1.alt01]; # 1 glyph(s)
} aalt;

feature ccmp {
	# glyph composition/decomposition
	@uc_basic = [A AE Aogonek B C Ccedilla D E Eogonek F G H I Iogonek J K L M N O OE Ohorn Oslash P Q R S Schwa T U Uhorn Uogonek V W X Y Z]; # 37 glyphs
	@acc_comb_top = [acutecomb breveacute brevecomb brevegrave brevehook brevetilde caroncomb caronslovakcomb circumflexacute circumflexbreve circumflexcomb circumflexgrave circumflexhook circumflextilde commaturnedtopcomb dieresisacute dieresiscaron dieresiscomb dieresisgrave dieresismacron dotaccentcomb gravecomb hookcomb horncomb hungarumlautcomb macroncomb ringcomb tildecomb]; # 28 glyphs
	@acc_comb_dflt = [breveacute brevegrave brevehook brevetilde circumflexacute circumflexbreve circumflexgrave circumflexhook circumflextilde dieresisacute dieresiscaron dieresisgrave dieresismacron hookcomb]; # 14 glyphs
	@acc_comb_case = [breveacute.case brevegrave.case brevehook.case brevetilde.case circumflexacute.case circumflexbreve.case circumflexgrave.case circumflexhook.case circumflextilde.case dieresisacute.case dieresiscaron.case dieresisgrave.case dieresismacron.case hookcomb.case]; # 14 glyphs

	lookup nonContextSubs {
		sub brevecomb acutecomb by breveacute;
		sub brevecomb gravecomb by brevegrave;
		sub brevecomb hookcomb by brevehook;
		sub brevecomb tildecomb by brevetilde;
		sub circumflexcomb acutecomb by circumflexacute;
		sub circumflexcomb gravecomb by circumflexgrave;
		sub circumflexcomb hookcomb by circumflexhook;
		sub circumflexcomb tildecomb by circumflextilde;
		sub circumflexcomb brevecomb by circumflexbreve;
		sub dieresiscomb acutecomb by dieresisacute;
		sub dieresiscomb caroncomb by dieresiscaron;
		sub dieresiscomb gravecomb by dieresisgrave;
		sub dieresiscomb macroncomb by dieresismacron;
	} nonContextSubs;

	lookup contextSubs {
		sub [L d l t] caroncomb' by caronslovakcomb; # /Lcaron /dcaron /lcaron /tcaron
		sub g commabelowcomb' by commaturnedtopcomb; # /gcommaaccent
		sub i' @acc_comb_top by dotlessi;
		sub j' @acc_comb_top by dotlessj;
		sub @uc_basic @acc_comb_dflt' by @acc_comb_case; # case accents
	} contextSubs;
} ccmp;

feature ordn {
	# ordinals
	sub [a o] by [ordfeminine ordmasculine];
} ordn;

feature frac {
	# fractions
	sub one [slash fraction] two by onehalf;
	sub one [slash fraction] three by uni2153;
	sub two [slash fraction] three by uni2154;
	sub one [slash fraction] four by onequarter;
	sub three [slash fraction] four by threequarters;
	sub one [slash fraction] five by uni2155;
	sub two [slash fraction] five by uni2156;
	sub three [slash fraction] five by uni2157;
	sub four [slash fraction] five by uni2158;
	sub one [slash fraction] six by uni2159;
	sub five [slash fraction] six by uni215A;
	sub one [slash fraction] seven by uni2150;
	sub one [slash fraction] eight by uni215B;
	sub three [slash fraction] eight by uni215C;
	sub five [slash fraction] eight by uni215D;
	sub seven [slash fraction] eight by uni215E;
	sub one [slash fraction] nine by uni2151;
} frac;

feature numr {
	# numerators
	sub @numbers_dflt by @numbers_numr;
} numr;

feature dnom {
	# denominators
	sub @numbers_dflt by @numbers_dnom;
} dnom;

feature sups {
	# superiors
	sub @numbers_dflt by @numbers_sups;
} sups;

feature sinf {
	# inferiors
	sub @numbers_dflt by @numbers_sinf;
} sinf;

feature zero {
	# slashed zero
	sub zero by zero.alt01;
} zero;

feature ss01 {
	featureNames {
		name 3 1 0x0409 "simple lowercase a"; # Win / Unicode / English US
		name 1 0 0 "simple lowercase a"; #   Mac / Roman / English
	};
	# stylistic set 1 - single storey a
	sub @lca_dflt by @lca_alt1;
	sub @lca_cyrl_dflt by @lca_cyrl_alt1;
} ss01;

feature ss02 {
	featureNames {
		name 3 1 0x0409 "simple lowercase g"; # Win / Unicode / English US
		name 1 0 0 "simple lowercase g"; #   Mac / Roman / English
	};
	# stylistic set 2 - single storey g
	sub @lcg_dflt by @lcg_alt1;
} ss02;

feature ss03 {
	featureNames {
		name 3 1 0x0409 "slashed number zero"; # Win / Unicode / English US
		name 1 0 0 "slashed number zero"; #   Mac / Roman / English
	};
	# slashed zero
	sub zero by zero.alt01;
} ss03;

feature ss04 {
	featureNames {
		name 3 1 0x0409 "plain number zero"; # Win / Unicode / English US
		name 1 0 0 "plain number zero"; #   Mac / Roman / English
	};
	# plain zero
	sub zero by zero.alt02;
} ss04;

feature ss05 {
	featureNames {
		name 3 1 0x0409 "alternate lowercase eszett"; # Win / Unicode / English US
		name 1 0 0 "alternate lowercase eszett"; #   Mac / Roman / English
	};
	# alternative german eszett
	sub germandbls by germandbls.alt01;
} ss05;

feature salt {
	# stylistic alternates - all stylistic sets combined
	sub @lca_dflt by @lca_alt1;
	sub @lcg_dflt by @lcg_alt1;
	sub @lca_cyrl_dflt by @lca_cyrl_alt1;
	sub zero by zero.alt02;
	sub germandbls by germandbls.alt01;
} salt;

feature mark {
	@mGC_bottom_0_0 = [cedillacomb commabelowcomb dotbelowcomb];
	@mGC_top_0_516 = [acutecomb breveacute brevecomb brevegrave brevehook brevetilde caroncomb circumflexacute circumflexbreve circumflexcomb circumflexgrave circumflexhook circumflextilde commaturnedtopcomb dieresisacute dieresiscaron dieresiscomb dieresisgrave dieresismacron dotaccentcomb gravecomb hookcomb hungarumlautcomb macroncomb ringcomb tildecomb];
	@mGC_top_0_698 = [breveacute.case brevegrave.case brevehook.case brevetilde.case circumflexacute.case circumflexbreve.case circumflexgrave.case circumflexhook.case circumflextilde.case dieresisacute.case dieresiscaron.case dieresisgrave.case dieresismacron.case hookcomb.case];

	markClass @mGC_bottom_0_0 <anchor 0 0> @MC_bottom;
	markClass @mGC_top_0_516 <anchor 0 516> @MC_top;
	markClass @mGC_top_0_698 <anchor 0 698> @MC_top;
	markClass caronslovakcomb <anchor 0 740> @MC_topright;
	markClass ogonekcomb <anchor 0 0> @MC_bottomright;

	lookup MARK_BASE_bottom {
		@bGC_D_bottom = [D J];
		@bGC_F_bottom = [F P];
		@bGC_c_bottom = [c h n];
		@bGC_f_bottom = [f C R];
		@bGC_i_bottom = [i dotlessi];
		@bGC_l_bottom = [l m o v w x z A G H I M N O T U V W X Y Z ohorn Ohorn Uhorn];
		@bGC_u_bottom = [u S uhorn];
		pos base @bGC_D_bottom <anchor 277 0> mark @MC_bottom;
		pos base @bGC_F_bottom <anchor 132 0> mark @MC_bottom;
		pos base @bGC_c_bottom <anchor 303 0> mark @MC_bottom;
		pos base @bGC_f_bottom <anchor 308 0> mark @MC_bottom;
		pos base @bGC_i_bottom <anchor 332 0> mark @MC_bottom;
		pos base @bGC_l_bottom <anchor 300 0> mark @MC_bottom;
		pos base @bGC_u_bottom <anchor 297 0> mark @MC_bottom;
		pos base B <anchor 315 0> mark @MC_bottom;
		pos base E <anchor 305 0> mark @MC_bottom;
		pos base K <anchor 322 0> mark @MC_bottom;
		pos base L <anchor 327 0> mark @MC_bottom;
		pos base a <anchor 283 0> mark @MC_bottom;
		pos base a.alt01 <anchor 287 0> mark @MC_bottom;
		pos base b <anchor 317 0> mark @MC_bottom;
		pos base d <anchor 282 0> mark @MC_bottom;
		pos base e <anchor 309 0> mark @MC_bottom;
		pos base k <anchor 323 0> mark @MC_bottom;
		pos base r <anchor 268 0> mark @MC_bottom;
		pos base s <anchor 294 0> mark @MC_bottom;
		pos base t <anchor 375 0> mark @MC_bottom;
		pos base y <anchor 460 0> mark @MC_bottom;
	} MARK_BASE_bottom;


	lookup MARK_BASE_bottomright {
		@bGC_i_bottomright = [i dotlessi];
		pos base @bGC_i_bottomright <anchor 546 0> mark @MC_bottomright;
		pos base A <anchor 570 0> mark @MC_bottomright;
		pos base E <anchor 520 0> mark @MC_bottomright;
		pos base I <anchor 516 0> mark @MC_bottomright;
		pos base U <anchor 394 0> mark @MC_bottomright;
		pos base a <anchor 550 0> mark @MC_bottomright;
		pos base a.alt01 <anchor 505 0> mark @MC_bottomright;
		pos base e <anchor 391 0> mark @MC_bottomright;
		pos base u <anchor 502 0> mark @MC_bottomright;
	} MARK_BASE_bottomright;


	lookup MARK_BASE_top {
		@bGC_J_top = [J K];
		@bGC_a.alt01_top = [a.alt01 g.alt01];
		@bGC_g.alt02_top = [g.alt02 m o v w x y z ae oslash ohorn];
		@bGC_g_top = [g u uhorn];
		@bGC_l_top = [l A H I M N O P Q T U V W X Y Z Oslash Ohorn Uhorn];
		pos base @bGC_J_top <anchor 313 698> mark @MC_top;
		pos base @bGC_a.alt01_top <anchor 287 516> mark @MC_top;
		pos base @bGC_g.alt02_top <anchor 300 516> mark @MC_top;
		pos base @bGC_g_top <anchor 297 516> mark @MC_top;
		pos base @bGC_l_top <anchor 300 698> mark @MC_top;
		pos base AE <anchor 393 698> mark @MC_top;
		pos base B <anchor 295 698> mark @MC_top;
		pos base C <anchor 328 698> mark @MC_top;
		pos base D <anchor 277 698> mark @MC_top;
		pos base E <anchor 305 698> mark @MC_top;
		pos base F <anchor 310 698> mark @MC_top;
		pos base G <anchor 306 698> mark @MC_top;
		pos base L <anchor 162 698> mark @MC_top;
		pos base R <anchor 308 698> mark @MC_top;
		pos base S <anchor 298 698> mark @MC_top;
		pos base a <anchor 283 516> mark @MC_top;
		pos base c <anchor 313 516> mark @MC_top;
		pos base dotlessi <anchor 332 516> mark @MC_top;
		pos base dotlessj <anchor 392 516> mark @MC_top;
		pos base e <anchor 302 516> mark @MC_top;
		pos base h <anchor 138 698> mark @MC_top;
		pos base n <anchor 303 516> mark @MC_top;
		pos base p <anchor 317 516> mark @MC_top;
		pos base q <anchor 282 516> mark @MC_top;
		pos base r <anchor 353 516> mark @MC_top;
		pos base s <anchor 298 516> mark @MC_top;
	} MARK_BASE_top;


	lookup MARK_BASE_topright {
		pos base L <anchor 290 740> mark @MC_topright;
		pos base d <anchor 567 740> mark @MC_topright;
		pos base l <anchor 426 740> mark @MC_topright;
		pos base t <anchor 387 760> mark @MC_topright;
	} MARK_BASE_topright;



} mark;

feature calt {
    @NotSpace = [a a.alt01 b c d e f g g.alt01 g.alt02 h i j k l m n o p q r s t u v w x y z A B C D E F G H I J K L M N O P Q R S T U V W X Y Z zero zero.alt01 zero.alt02 one two three four five six seven eight nine ampersand at hyphen softhyphen endash emdash underscore period ellipsis colon comma semicolon quotesingle quotedbl quoteleft quoteright quotedblleft quotedblright quotesinglbase quotedblbase guilsinglleft guilsinglright guillemotleft guillemotright exclamdown exclam questiondown question parenleft parenright bracketleft bracketright braceleft braceright slash backslash fraction percent perthousand bar brokenbar section paragraph copyright registered trademark ordfeminine ordmasculine degree asterisk dagger daggerdbl numbersign asciicircum asciitilde plus minus plusminus multiply divide equal approxequal notequal less greater lessequal greaterequal periodcentered bullet lozenge logicalnot radical integral infinity estimated litre numerosign partialdiff cent Euro florin sterling dollar yen baht coloncurrency lira naira rupee won sheqel dong kip tugrik peso guarani hryvnia cedi tenge rupeeindian liraturkish ruble bitcoin fi fl aacute abreve acircumflex adieresis adotbelow agrave ahook amacron aogonek aring aringacute atilde abreveacute abrevedotbelow abrevegrave abrevehook abrevetilde acircumflexacute acircumflexdotbelow acircumflexgrave acircumflexhook acircumflextilde aacute.alt01 abreve.alt01 acircumflex.alt01 adieresis.alt01 adotbelow.alt01 agrave.alt01 ahook.alt01 amacron.alt01 aogonek.alt01 aring.alt01 aringacute.alt01 atilde.alt01 abreveacute.alt01 abrevedotbelow.alt01 abrevegrave.alt01 abrevehook.alt01 abrevetilde.alt01 acircumflexacute.alt01 acircumflexdotbelow.alt01 acircumflexgrave.alt01 acircumflexhook.alt01 acircumflextilde.alt01 ae aeacute cacute ccaron ccedilla ccircumflex cdotaccent dcaron dcroat eth eacute ebreve ecaron ecircumflex edieresis edotaccent edotbelow egrave ehook emacron eogonek etilde ecircumflexacute ecircumflexdotbelow ecircumflexgrave ecircumflexhook ecircumflextilde schwa gbreve gcircumflex gcommaaccent gdotaccent gbreve.alt01 gcircumflex.alt01 gcommaaccent.alt01 gdotaccent.alt01 hbar hcircumflex dotlessi iacute ibreve icircumflex idieresis idotbelow igrave ihook imacron iogonek itilde ij ijacute dotlessj jacute jcircumflex kcommaaccent kgreenlandic lacute lcaron lcommaaccent ldot lslash nacute ncaron ncommaaccent ntilde napostrophe eng oacute obreve ocircumflex odieresis odotbelow ograve ohook ohungarumlaut omacron oslash oslashacute otilde ohorn ohornacute ohorndotbelow ohorngrave ohornhook ohorntilde ocircumflexacute ocircumflexdotbelow ocircumflexgrave ocircumflexhook ocircumflextilde oe racute rcaron rcommaaccent sacute scaron scedilla scircumflex scommaaccent germandbls germandbls.alt01 tbar tcaron tcommaaccent tcedilla thorn uacute ubreve ucircumflex udieresis udotbelow ugrave uhook uhungarumlaut umacron uogonek uring utilde uhorn uhornacute uhorndotbelow uhorngrave uhornhook uhorntilde wacute wcircumflex wdieresis wgrave yacute ycircumflex ydieresis ydotbelow ygrave yhook ytilde zacute zcaron zdotaccent Aacute Abreve Acircumflex Adieresis Adotbelow Agrave Ahook Amacron Aogonek Aring Aringacute Atilde Abreveacute Abrevedotbelow Abrevegrave Abrevehook Abrevetilde Acircumflexacute Acircumflexdotbelow Acircumflexgrave Acircumflexhook Acircumflextilde AE AEacute Cacute Ccaron Ccedilla Ccircumflex Cdotaccent Dcaron Dcroat Eth Eacute Ebreve Ecaron Ecircumflex Edieresis Edotaccent Edotbelow Egrave Ehook Emacron Eogonek Etilde Ecircumflexacute Ecircumflexdotbelow Ecircumflexgrave Ecircumflexhook Ecircumflextilde Schwa Gbreve Gcircumflex Gcommaaccent Gdotaccent Hbar Hcircumflex Iacute Ibreve Icircumflex Idieresis Idotaccent Idotbelow Igrave Ihook Imacron Iogonek Itilde IJ IJacute Jacute Jcircumflex Kcommaaccent Lacute Lcaron Lcommaaccent Ldot Lslash Nacute Ncaron Ncommaaccent Ntilde Eng Oacute Obreve Ocircumflex Odieresis Odotbelow Ograve Ohook Ohungarumlaut Omacron Oslash Oslashacute Otilde Ohorn Ohornacute Ohorndotbelow Ohorngrave Ohornhook Ohorntilde Ocircumflexacute Ocircumflexdotbelow Ocircumflexgrave Ocircumflexhook Ocircumflextilde OE Racute Rcaron Rcommaaccent Sacute Scaron Scedilla Scircumflex Scommaaccent Germandbls Tbar Tcaron Tcommaaccent Tcedilla Thorn Uacute Ubreve Ucircumflex Udieresis Udotbelow Ugrave Uhook Uhungarumlaut Umacron Uogonek Uring Utilde Uhorn Uhornacute Uhorndotbelow Uhorngrave Uhornhook Uhorntilde Wacute Wcircumflex Wdieresis Wgrave Yacute Ycircumflex Ydotbelow Ydieresis Ygrave Yhook Ytilde Zacute Zcaron Zdotaccent mu Delta product summation Omega pi uni0430 uni0430.alt01 uni0431 uni0432 uni0433 uni0434 uni0435 uni0436 uni0437 uni0438 uni0439 uni043A uni043B uni043C uni043D uni043E uni043F uni0440 uni0441 uni0442 uni0443 uni0444 uni0445 uni0446 uni0447 uni0448 uni0449 uni044A uni044B uni044C uni044D uni044E uni044F uni0410 uni0411 uni0412 uni0413 uni0414 uni0415 uni0416 uni0417 uni0418 uni0419 uni041A uni041B uni041C uni041D uni041E uni041F uni0420 uni0421 uni0422 uni0423 uni0424 uni0425 uni0426 uni0427 uni0428 uni0429 uni042A uni042B uni042C uni042D uni042E uni042F uni04D3 uni04D1 uni04D3.alt01 uni04D1.alt01 uni04D5 uni0453 uni0491 uni0493 uni0495 uni0450 uni0451 uni04D7 uni0454 uni04DD uni04C2 uni0497 uni04DF uni0499 uni04CF uni04E5 uni045D uni04E3 uni045C uni049B uni049D uni04A1 uni0459 uni04A3 uni045A uni04A5 uni04E7 uni0473 uni04E9 uni04AB uni04EF uni04F1 uni04F3 uni045E uni04AF uni04B1 uni04B3 uni04F5 uni04B7 uni04B9 uni04F9 uni0455 uni045F uni0456 uni0457 uni0458 uni0452 uni045B uni04BB uni04D9 uni04D2 uni04D0 uni04D4 uni0403 uni0490 uni0492 uni0494 uni0400 uni0401 uni04D6 uni0404 uni04DC uni04C1 uni0496 uni04DE uni0498 uni04C0 uni04E4 uni040D uni04E2 uni040C uni049A uni049C uni04A0 uni0409 uni04A2 uni040A uni04A4 uni04E6 uni04E8 uni04AA uni04EE uni04F0 uni04F2 uni040E uni04AE uni04B0 uni04B2 uni04F4 uni04B6 uni04B8 uni04F8 uni0405 uni040F uni0406 uni0407 uni0408 uni0402 uni040B uni04BA uni04D8 zerosuperior onesuperior twosuperior threesuperior foursuperior fivesuperior sixsuperior sevensuperior eightsuperior ninesuperior zeroinferior oneinferior twoinferior threeinferior fourinferior fiveinferior sixinferior seveninferior eightinferior nineinferior zero.numr one.numr two.numr three.numr four.numr five.numr six.numr seven.numr eight.numr nine.numr zero.dnom one.dnom two.dnom three.dnom four.dnom five.dnom six.dnom seven.dnom eight.dnom nine.dnom onehalf uni2153 uni2154 onequarter threequarters uni2155 uni2156 uni2157 uni2158 uni2159 uni215A uni2150 uni215B uni215C uni215D uni215E uni2151 checkmark crossmark arrowleft arrowup arrowdown arrowright arrowupleft arrowupright arrowdownleft arrowdownright arrowupleftcorner arrowdownleftcorner arrowleftupcorner arrowrightupcorner arrowleftdowncorner arrowrightdowncorner arrowuprightcorner arrowdownrightcorner arrowleftarrowright arrowrightarrowleft arrowleftright arrowupdown arrowdowncounterclockhalf arrowdownclockhalf arrowhookleft arrowhookright arrowupleftcounterclock arrowuprightclock tilde tilde.alt01 macron dotaccent dieresis hungarumlaut acute grave circumflex caron breve breve.cyrl ring ringacute commaturnedtop caronslovak cedilla ogonek tildecomb macroncomb dotaccentcomb dieresiscomb hungarumlautcomb acutecomb gravecomb circumflexcomb caroncomb brevecomb ringcomb hookcomb commaturnedtopcomb caronslovakcomb horncomb cedillacomb dotbelowcomb commabelowcomb ogonekcomb breveacute brevegrave brevehook brevetilde dieresisacute dieresiscaron dieresisgrave circumflexacute circumflexbreve circumflexgrave circumflexhook dieresismacron circumflextilde tilde.case tilde.alt01.case macron.case dotaccent.case dieresis.case hungarumlaut.case acute.case grave.case circumflex.case caron.case breve.case breve.cyrl_case ring.case ringacute.case hookcomb.case breveacute.case brevegrave.case brevehook.case brevetilde.case dieresisacute.case dieresiscaron.case dieresisgrave.case circumflexacute.case circumflexbreve.case circumflexgrave.case circumflexhook.case dieresismacron.case circumflextilde.case];

    @Digit = [zero one two three four five six seven eight nine];

    @HexDigit = [@Digit a b c d e f A B C D E F];

lookup numbersign_numbersign_numbersign_numbersign {
  ignore sub numbersign numbersign' numbersign numbersign numbersign;
  ignore sub numbersign' numbersign numbersign numbersign numbersign;
  sub LIG LIG LIG numbersign' by numbersign_numbersign_numbersign_numbersign.liga;
  sub LIG LIG  numbersign' numbersign  by LIG;
  sub LIG  numbersign'  numbersign  numbersign  by LIG;
  sub numbersign'   numbersign   numbersign  numbersign  by LIG;
} numbersign_numbersign_numbersign_numbersign;

    lookup exclam_equal_equal {
        ignore sub exclam exclam' equal equal;
        ignore sub exclam' equal equal equal;
        ignore sub parenleft question exclam' equal equal;
        ignore sub parenleft question less exclam' equal equal;
        sub LIG LIG equal' by exclam_equal_equal.liga;
        sub LIG  equal' equal  by LIG;
        sub exclam'   equal  equal  by LIG;
    } exclam_equal_equal;

lookup less_equal_greater {
  ignore sub less less' equal greater;
  ignore sub less' equal greater greater;
  ignore sub parenleft question less' equal greater;
  sub LIG LIG greater' by less_equal_greater.liga;
  sub LIG  equal' greater  by LIG;
  sub less'   equal  greater  by LIG;
} less_equal_greater;

lookup less_less_equal {
  ignore sub less less' less equal;
  ignore sub less' less equal equal;
  sub LIG LIG equal' by less_less_equal.liga;
  sub LIG  less' equal  by LIG;
  sub less'   less  equal  by LIG;
} less_less_equal;

lookup slash_asciitilde_backslash {
  ignore sub slash slash' asciitilde backslash;
  ignore sub slash' asciitilde backslash backslash;
  sub LIG LIG backslash' by slash_asciitilde_backslash.liga;
  sub LIG  asciitilde' backslash  by LIG;
  sub slash'   asciitilde  backslash  by LIG;
} slash_asciitilde_backslash;

lookup equal_exclam_equal.liga {
  ignore sub equal equal' exclam equal;
  ignore sub equal' exclam equal equal;
  ignore sub parenleft question equal' exclam equal;
  ignore sub parenleft question less equal' exclam equal;
  sub LIG LIG equal' by equal_exclam_equal.liga;
  sub LIG  exclam' equal  by LIG;
  sub equal'   exclam  equal  by LIG;
} equal_exclam_equal.liga;

lookup less_slash_greater {
  ignore sub less less' slash greater;
  ignore sub less' slash greater greater;
  sub LIG LIG greater' by less_slash_greater.liga;
  sub LIG  slash' greater  by LIG;
  sub less'   slash  greater  by LIG;
} less_slash_greater;

lookup equal_colon_equal {
  ignore sub equal equal' colon equal;
  ignore sub equal' colon equal equal;
  ignore sub parenleft question equal' colon equal;
  ignore sub parenleft question less equal' colon equal;
  sub LIG LIG equal' by equal_colon_equal.liga;
  sub LIG  colon' equal  by LIG;
  sub equal'   colon  equal  by LIG;
} equal_colon_equal;

lookup equal_greater_greater {
  ignore sub equal equal' greater greater;
  ignore sub equal' greater greater greater;
  ignore sub parenleft question equal' greater greater;
  ignore sub parenleft question less equal' greater greater;
  sub LIG LIG greater' by equal_greater_greater.liga;
  sub LIG  greater' greater  by LIG;
  sub equal'   greater  greater  by LIG;
} equal_greater_greater;

    lookup period_period_period {
        ignore sub period period' period period;
        ignore sub period' period period period;
        sub LIG LIG period' by period_period_period.liga;
        sub LIG  period' period  by LIG;
        sub period'   period  period  by LIG;
    } period_period_period;

    lookup asciitilde_asciitilde_greater {
        ignore sub asciitilde asciitilde' asciitilde greater;
        ignore sub asciitilde' asciitilde greater greater;
        sub LIG LIG greater' by asciitilde_asciitilde_greater.liga;
        sub LIG  asciitilde' greater  by LIG;
        sub asciitilde'   asciitilde  greater  by LIG;
    } asciitilde_asciitilde_greater;
    lookup asterisk_asterisk_asterisk {
        ignore sub asterisk asterisk' asterisk asterisk;
        ignore sub asterisk' asterisk asterisk asterisk;
        ignore sub slash asterisk' asterisk asterisk;
        ignore sub asterisk' asterisk asterisk slash;
        sub LIG LIG asterisk' by asterisk_asterisk_asterisk.liga;
        sub LIG  asterisk' asterisk  by LIG;
        sub asterisk'   asterisk  asterisk  by LIG;
    } asterisk_asterisk_asterisk;

lookup numbersign_numbersign_numbersign {
  ignore sub numbersign numbersign' numbersign numbersign;
  ignore sub numbersign' numbersign numbersign numbersign;
  sub LIG LIG numbersign' by numbersign_numbersign_numbersign.liga;
  sub LIG  numbersign' numbersign  by LIG;
  sub numbersign'   numbersign  numbersign  by LIG;
} numbersign_numbersign_numbersign;

    lookup slash_asterisk {
        ignore sub slash slash' asterisk;
        ignore sub slash' asterisk asterisk;
        ignore sub slash' asterisk slash;
        ignore sub asterisk slash' asterisk;
        sub LIG asterisk' by slash_asterisk.liga;
        sub slash'  asterisk  by LIG;
    } slash_asterisk;

    lookup ampersand_ampersand {
      ignore sub ampersand ampersand' ampersand;
      ignore sub ampersand' ampersand ampersand;
      sub LIG ampersand' by ampersand_ampersand.liga;
      sub ampersand'  ampersand  by LIG;
    } ampersand_ampersand;
    lookup equal_equal {
        ignore sub equal equal' equal;
        ignore sub equal' equal equal;
        ignore sub parenleft question equal' equal;
        ignore sub parenleft question less equal' equal;
        sub LIG equal' by equal_equal.liga;
        sub equal'  equal  by LIG;
    } equal_equal;
    lookup equal_equal_equal {
        ignore sub equal equal' equal equal;
        ignore sub equal' equal equal equal;
        ignore sub parenleft question equal' equal equal;
        ignore sub parenleft question less equal' equal equal;
        sub LIG LIG equal' by equal_equal_equal.liga;
        sub LIG  equal' equal  by LIG;
        sub equal'   equal  equal  by LIG;
    } equal_equal_equal;
    lookup exclam_equal {
        ignore sub exclam exclam' equal;
        ignore sub exclam' equal equal;
        ignore sub parenleft question exclam' equal;
        ignore sub parenleft question less exclam' equal;
        sub LIG equal' by exclam_equal.liga;
        sub exclam'  equal  by LIG;
    } exclam_equal;
    lookup asciitilde_asciitilde {
        ignore sub asciitilde asciitilde' asciitilde;
        ignore sub asciitilde' asciitilde asciitilde;
        sub LIG asciitilde' by asciitilde_asciitilde.liga;
        sub asciitilde'  asciitilde  by LIG;
    } asciitilde_asciitilde;
    lookup bar_bar {
        ignore sub bar bar' bar;
        ignore sub bar' bar bar;
        sub LIG bar' by bar_bar.liga;
        sub bar'  bar  by LIG;
    } bar_bar;
    lookup asterisk_asterisk {
        ignore sub asterisk asterisk' asterisk;
        ignore sub asterisk' asterisk asterisk;
        ignore sub slash asterisk' asterisk;
        ignore sub asterisk' asterisk slash;
        sub LIG asterisk' by asterisk_asterisk.liga;
        sub asterisk'  asterisk  by LIG;
    } asterisk_asterisk;

    lookup slash_slash {
        ignore sub slash slash' slash;
        ignore sub slash' slash slash;
        sub LIG slash' by slash_slash.liga;
        sub slash'  slash  by LIG;
    } slash_slash;
    lookup equal_greater {
        ignore sub equal equal' greater;
        ignore sub equal' greater greater;
        ignore sub parenleft question equal' greater;
        ignore sub parenleft question less equal' greater;
        sub LIG greater' by equal_greater.liga;
        sub equal'  greater  by LIG;
    } equal_greater;

    lookup period_period {
        ignore sub period period' period;
        ignore sub period' period period;
        sub LIG period' by period_period.liga;
        sub period'  period  by LIG;
    } period_period;

    lookup colon_colon {
        ignore sub colon colon' colon;
        ignore sub colon' colon colon;
        ignore sub parenleft question colon' colon;
        sub LIG colon' by colon_colon.liga;
        sub colon'  colon  by LIG;
    } colon_colon;

    lookup numbersign_exclam {
        ignore sub numbersign numbersign' exclam;
        ignore sub numbersign' exclam exclam;
        sub LIG exclam' by numbersign_exclam.liga;
        sub numbersign'  exclam  by LIG;
    } numbersign_exclam;

    lookup greater_equal {
        ignore sub greater greater' equal;
        ignore sub greater' equal equal;
        ignore sub greater' equal less;
        sub LIG equal' by greater_equal.liga;
        sub greater'  equal  by LIG;
    } greater_equal;

    lookup less_slash {
        ignore sub less less' slash;
        ignore sub less' slash slash;
        sub LIG slash' by less_slash.liga;
        sub less'  slash  by LIG;
    } less_slash;

    lookup less_equal {
        ignore sub less less' equal;
        ignore sub less' equal equal;
        ignore sub parenleft question less' equal;
        sub LIG equal' by less_equal.liga;
        sub less'  equal  by LIG;
    } less_equal;

    lookup asterisk_greater {
        ignore sub asterisk asterisk' greater;
        ignore sub asterisk' greater greater;
        sub LIG greater' by asterisk_greater.liga;
        sub asterisk'  greater  by LIG;
    } asterisk_greater;

    lookup asterisk_slash {
        ignore sub asterisk asterisk' slash;
        ignore sub asterisk' slash slash;
        ignore sub slash asterisk' slash;
        ignore sub asterisk' slash asterisk;
        sub LIG slash' by asterisk_slash.liga;
        sub asterisk'  slash  by LIG;
    } asterisk_slash;

    lookup backslash_slash {
        ignore sub @NotSpace backslash' slash;
        ignore sub backslash' slash @NotSpace;
        sub LIG slash' by backslash_slash.liga;
        sub backslash' slash by LIG;
    } backslash_slash;

    lookup period_question {
        ignore sub period period' question;
        ignore sub period' question question;
        sub LIG question' by period_question.liga;
        sub period'  question  by LIG;
    } period_question;

    lookup asciitilde_equal {
        ignore sub asciitilde asciitilde' equal;
        ignore sub asciitilde' equal equal;
        sub LIG equal' by asciitilde_equal.liga;
        sub asciitilde'  equal  by LIG;
    } asciitilde_equal;

    lookup hyphen_hyphen {
        ignore sub hyphen hyphen' hyphen;
        ignore sub hyphen' hyphen hyphen;
        sub LIG hyphen' by hyphen_hyphen.liga;
        sub hyphen'  hyphen  by LIG;
    } hyphen_hyphen;

    lookup plus_plus {
        ignore sub plus plus' plus;
        ignore sub plus' plus plus;
        sub LIG plus' by plus_plus.liga;
        sub plus'  plus  by LIG;
    } plus_plus;

    lookup slash_greater {
        ignore sub slash slash' greater;
        ignore sub slash' greater greater;
        sub LIG greater' by slash_greater.liga;
        sub slash'  greater  by LIG;
    } slash_greater;

    lookup w_w_w {
        ignore sub w w' w w;
        ignore sub w' w w w;
        sub LIG LIG w' by uni0077_w_w.liga;
        sub LIG  w' w  by LIG;
        sub w'   w  w  by LIG;
    } w_w_w;

    lookup underscore_underscore {
        ignore sub underscore underscore' underscore;
        ignore sub underscore' underscore underscore;
        sub LIG underscore' by underscore_underscore.liga;
        sub underscore'  underscore  by LIG;
    } underscore_underscore;

    lookup slash_equal {
        ignore sub slash slash' equal;
        ignore sub slash' equal equal;
        sub LIG equal' by slash_equal.liga;
        sub slash'  equal  by LIG;
    } slash_equal;

    lookup period_equal {
        ignore sub period period' equal;
        ignore sub period' equal equal;
        sub LIG equal' by period_equal.liga;
        sub period'  equal  by LIG;
    } period_equal;

lookup colon_equal {
  ignore sub colon colon' equal;
  ignore sub colon' equal equal;
  ignore sub parenleft question colon' equal;
  sub LIG equal' by colon_equal.liga;
  sub colon'  equal  by LIG;
} colon_equal;

lookup hyphen_greater {
  ignore sub hyphen hyphen' greater;
  ignore sub hyphen' greater greater;
  sub LIG greater' by hyphen_greater.liga;
  sub hyphen'  greater  by LIG;
} hyphen_greater;

lookup less_hyphen {
  ignore sub less less' hyphen;
  ignore sub less' hyphen hyphen;
  sub LIG hyphen' by less_hyphen.liga;
  sub less'  hyphen  by LIG;
} less_hyphen;

lookup numbersign_numbersign {
  ignore sub numbersign numbersign' numbersign;
  ignore sub numbersign' numbersign numbersign;
  sub LIG numbersign' by numbersign_numbersign.liga;
  sub numbersign'  numbersign  by LIG;
} numbersign_numbersign;

lookup greater_greater {
  ignore sub greater greater' greater;
  ignore sub greater' greater greater;
  ignore sub asterisk greater' greater;
  ignore sub plus greater' greater;
  ignore sub dollar greater' greater;
  sub LIG greater' by greater_greater.liga;
  sub greater'  greater  by LIG;
} greater_greater;



    sub zero x' @HexDigit by multiply;
    sub @Digit x' @Digit by multiply;
    sub @Digit colon' @Digit by colon.valign;
} calt;
